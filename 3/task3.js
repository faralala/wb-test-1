/*
Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
	вычисление N-го числа в ряду Фибоначчи 
	вычисление всех чисел в ряду Фибоначчи до числа N
	вычисление N-го простого числа
	вычисление всех простых чисел до числа N
	Будет плюсом, если задумаетесь и об оптимизации.
 */

const mathX = (function () {
	// Функция для вычисления N-го числа в ряду Фибоначчи
	function fibonacci(n) {
		if (n <= 1) {
			// Если N = 1 или меньше возвращаем n
			return n
		} else {
			return fibonacci(n - 1) + fibonacci(n - 2) // Если N !== 1 и > 1 , возвращаем сумму результата рекурсии
		}
	}

	// функция для вычисления всех чисел в ряду Фибоначчи до числа N
	function fibonacciSequence(n) {
		const sequence = [0, 1] // Объявляем  массив чисел фибоначи 0 элемент это предыдущие число 1 элемент это следующие число
		for (let i = 2; i <= n; i++) {
			// Цикл со 2 элемента до n
			sequence[i] = sequence[i - 2] + sequence[i - 1] // Записываем результат массива под индексом i
		}
		return sequence.slice(0, n + 1) // Возвращаем новый массив 0 - индекс копии. n+1 слайс вычисляет последний индекс массива до которого возвращаем копию массива
	}

	// Функция для проверки, является ли число простым
	function isPrime(number) {
		if (number <= 1) {
			// если число <= 1 выведем false
			return false
		}
		for (let i = 2; i < number; i++) {
			// цикл начинаем с 2(простое число всегда больше 1)
			if (number % i === 0) {
				// если число делиться без остатка то
				return false // возвращаем false т.к. число делиться на само себя и на 1
			}
		}
		return number > 1 // вывод числа которое делится на себя и на 1
	}
	// Функция для вычисления N-го простого числа
	function primeNumber(n) {
		if (n <= 0) return null // проверка

		let num = 2 // Число для проверки в вспомогательное условие
		let count = 0 // Первая итерация цикла

		while (count < n) {
			// Создаем цикл который будет выполняться пока итерации не достигнут n
			if (isPrime(num)) {
				// проверка числа
				count++ // увеличиваем итерацию если число простое
			}
			num++ // шаг поиска простого числа
		}

		return num - 1 // возвращаем последнее простое число
	}

	// функция для вычисления всех простых чисел до числа N

	function primeNumbers(n) {
		const primes = [] // создаём массив результата
		for (let i = 2; i <= n; i++) {
			//! Цикл for которые начинает считать с цифры 2 так как простые числа больше 0 и 1
			if (isPrime(i)) {
				// проверка числа
				primes.push(i) // Если получили простое число пушим его в конец массива
			}
		}
		return primes // Возвращаем  массив простых чисел
	}

	// возвращаем объект с функциями
	return {
		// Возвращаем ключи функции для получении доступа к ним
		fibonacci,
		fibonacciSequence,
		primeNumber,
		primeNumbers,
	}
})()

console.log(mathX.fibonacci(5)) // 5
console.log(mathX.fibonacci(6)) // 8
console.log(mathX.fibonacciSequence(5)) // [ 0, 1, 1, 2, 3, 5 ]
console.log(mathX.fibonacciSequence(6)) // [0, 1, 1, 2, 3, 5, 8 ]
console.log(mathX.primeNumber(7)) // 17
console.log(mathX.primeNumber(8)) // 19
console.log(mathX.primeNumbers(17)) // [ 2,  3,  5, 7,11, 13, 17 ]
console.log(mathX.primeNumbers(20)) // [ 2,  3,  5,  7, 11, 13, 17, 19]
